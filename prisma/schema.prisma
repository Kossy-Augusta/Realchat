generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int            @id @default(autoincrement())
  username         String         @db.VarChar(50)
  email            String         @unique
  password         String
  refresh_token    String         @db.Text @default("")
  picture          String?        @default("")
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  chats            ChatsToUsers[]
  receievedmessage Message[]      @relation("ReceivedMessage")
  sentmessage      Message[]      @relation("SentMessage")

  @@map("users")
}

model Chat {
  id      Int            @id @default(autoincrement())
  users   ChatsToUsers[]
  message Message[]

  @@map("chats")
}

model ChatsToUsers {
  user_id         Int
  chat_id         Int
  chat            Chat        @relation(fields: [chat_id], references: [id])
  user            User        @relation(fields: [user_id], references: [id])

  @@id([user_id, chat_id])
  @@index([chat_id], map: "chatstousers_chat_id_fkey")
  @@map("chatstousers")
}

model Message {
  id           Int           @id @default(autoincrement())
  chat_id      Int
  sender_id    Int?
  reciever_id  Int?
  content      String?       @db.Text
  status_flag  MessageStatus @default(SENT)
  message_type MessageType   @default(TEXT)
  message_url  String?
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  chat         Chat          @relation(fields: [chat_id], references: [id])
  reciever     User?         @relation("ReceivedMessage", fields: [reciever_id], references: [id], onDelete: Restrict)
  sender       User?         @relation("SentMessage", fields: [sender_id], references: [id], onDelete: Restrict)

  @@index([chat_id], map: "messages_chat_id_fkey")
  @@index([reciever_id], map: "messages_reciever_id_fkey")
  @@index([sender_id], map: "messages_sender_id_fkey")
  @@map("messages")
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}
